name: CI/CD for self-directed-training

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create DB and tables, insert initial data
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..30}; do
            if psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "SELECT 1" >/dev/null 2>&1; then
              echo "Postgres is up"; break
            fi
            echo "Waiting for Postgres... ($i)"; sleep 1
          done
          psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='fullness_ec'" | grep -q 1 \
            || psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "CREATE DATABASE fullness_ec"
          psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p 5432 -U postgres -d postgres -f src/main/resources/db/init.sql
          psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p 5432 -U postgres -d fullness_ec -f src/main/resources/db/init.sql

      - name: Build jar (skip tests)
        run: ./gradlew bootJar -x test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/self-directed-training-0.0.1-SNAPSHOT.jar

      - name: Write private key
        run: |
          echo "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Transfer jar to EC2
        run: |
          scp -i ec2-key.pem -o StrictHostKeyChecking=no \
            build/libs/self-directed-training-0.0.1-SNAPSHOT.jar \
            ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/self-directed-training-0.0.1-SNAPSHOT.jar

      - name: Deploy and restart service
        run: |
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} <<'EOF'
            set -e
            sudo mkdir -p /opt/self-directed-training
            sudo mv /home/ubuntu/self-directed-training-0.0.1-SNAPSHOT.jar /opt/self-directed-training/app.jar
            sudo chown root:root /opt/self-directed-training/app.jar
            sudo systemctl daemon-reload || true
            sudo systemctl restart self-directed-training.service
            sudo systemctl status self-directed-training.service --no-pager -l || true
          EOF